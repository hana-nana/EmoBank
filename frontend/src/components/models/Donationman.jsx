/*
Auto-generated by: https://github.com/pmndrs/gltfjsx
Command: npx gltfjsx@6.2.16 donationman.glb 
*/

import { useRef,useEffect,useState,useContext } from 'react'
import { useGLTF, useAnimations,Outlines } from '@react-three/drei'
import { GlobalContext } from '../../App'
import { UseAnimatedText } from '../common/hooks/UseAnimatedText';
import { TextBoard } from '../common/hooks/TextBoard';
import { useFrame } from '@react-three/fiber';

const text = "여기는 기부창구 입니다.";

export function Donationman(props) {
  const group = useRef()
  const chatRef = useRef(null);
  const {displayText} = UseAnimatedText(text);
  const { nodes, materials, animations } = useGLTF('/resources/donationman.glb')
  const { actions } = useAnimations(animations, group)

  const [isOutlined, setIsOutlined] = useState(false)
  const {zoomed}= useContext(GlobalContext)

  useEffect(() => {
    //actions.idle.play();
    actions.idle.play();
    const near=props.isNear
    
    if(near==="donate" && zoomed===false){
      setIsOutlined(true);

      chatRef.current.position.set(
        group.current.position.x - 0.7,
        group.current.position.y + 4.3,
        group.current.position.z - 2,
      )
    }
    else if(near==="donate" && zoomed===true){
      setIsOutlined(false)
      actions.gesture?.reset().play()
    }
    else{
      setIsOutlined(false)
      actions.idle.play()
      chatRef.current.position.set()
    }
  });

  useFrame(() => {
    if(!chatRef.current) return;
    chatRef.current.lookAt(10000, 10000, 10000);
  })

  return (
    <>
    <TextBoard ref={chatRef} text={displayText} />
    <group ref={group} {...props} dispose={null}>
      <group name="Scene">
      <group name="Armature" rotation={[Math.PI / 2, 0, 0]} scale={0.01}>
          <primitive object={nodes.mixamorigHips} />
          <skinnedMesh name="back" geometry={nodes.back.geometry} material={materials['Material.009']} skeleton={nodes.back.skeleton} />
          <skinnedMesh name="body" geometry={nodes.body.geometry} material={materials['Material.011']} skeleton={nodes.body.skeleton}>
          {isOutlined  &&<Outlines angle={0} thickness={200} color="yellow" />}
          </skinnedMesh>
          <skinnedMesh name="body001" geometry={nodes.body001.geometry} material={materials['Material.014']} skeleton={nodes.body001.skeleton} />
          <skinnedMesh name="bowtie" geometry={nodes.bowtie.geometry} material={materials['Material.007']} skeleton={nodes.bowtie.skeleton} />
          <skinnedMesh name="coat" geometry={nodes.coat.geometry} material={materials['Material.009']} skeleton={nodes.coat.skeleton} />
          <skinnedMesh name="eyebrow1" geometry={nodes.eyebrow1.geometry} material={materials['Material.010']} skeleton={nodes.eyebrow1.skeleton} />
          <skinnedMesh name="eyebrow2" geometry={nodes.eyebrow2.geometry} material={materials['Material.010']} skeleton={nodes.eyebrow2.skeleton} />
          <skinnedMesh name="groin" geometry={nodes.groin.geometry} material={materials['Material.002']} skeleton={nodes.groin.skeleton} />
          <skinnedMesh name="hair" geometry={nodes.hair.geometry} material={materials['Material.008']} skeleton={nodes.hair.skeleton} />
          <skinnedMesh name="left" geometry={nodes.left.geometry} material={materials['Material.017']} skeleton={nodes.left.skeleton} />
          <skinnedMesh name="left_center" geometry={nodes.left_center.geometry} material={materials['Material.001']} skeleton={nodes.left_center.skeleton} />
          <skinnedMesh name="left_leg" geometry={nodes.left_leg.geometry} material={materials['Material.002']} skeleton={nodes.left_leg.skeleton} />
          <skinnedMesh name="monocle" geometry={nodes.monocle.geometry} material={materials['Material.004']} skeleton={nodes.monocle.skeleton} />
          <skinnedMesh name="monocleline" geometry={nodes.monocleline.geometry} material={materials['Material.005']} skeleton={nodes.monocleline.skeleton} />
          <skinnedMesh name="mustache" geometry={nodes.mustache.geometry} material={materials['Material.006']} skeleton={nodes.mustache.skeleton} />
          <skinnedMesh name="right" geometry={nodes.right.geometry} material={materials['Material.017']} skeleton={nodes.right.skeleton} />
          <skinnedMesh name="right_center" geometry={nodes.right_center.geometry} material={materials['Material.001']} skeleton={nodes.right_center.skeleton} />
          <skinnedMesh name="shirt" geometry={nodes.shirt.geometry} material={materials['Material.013']} skeleton={nodes.shirt.skeleton} />
          <skinnedMesh name="shoe_left" geometry={nodes.shoe_left.geometry} material={materials['Material.003']} skeleton={nodes.shoe_left.skeleton} />
          <skinnedMesh name="실린더" geometry={nodes.실린더.geometry} material={materials['Material.009']} skeleton={nodes.실린더.skeleton} />
        </group>
      </group>
    </group>
    </>
  )
}
export default Donationman;
useGLTF.preload('/donationman.glb')
